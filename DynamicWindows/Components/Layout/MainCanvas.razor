@implements IDisposable;

@inject IJSRuntime jsRuntime;

<style>
    .mainCanvas {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: @Colors.Hex(Colors.Background);
        z-index: -1;
    }

    .window {
        position: absolute;
        display: flex;
        flex-direction: column;
        min-width: 2rem;
        min-height: 2rem;
        border: 1px solid @Colors.Hex(Colors.CanvasBorder);
    }

    .windowTopbar {
        position: relative;
        display: flex;
        width: 100%;
        height: calc(1rem + 1px);
        min-height: calc(1rem + 1px);
        max-height: calc(1rem + 1px);
        background-color: @Colors.Hex(Colors.CanvasTopbar);
    }

    .windowCanvas {
        position: relative;
        display: flex;
        width: 100%;
        height: 100%;
        background-color: @Colors.Hex(Colors.Canvas);
    }

    .windowHeader {
        position: absolute;
        display: flex;
        width: 100%;
        padding: 0;
        padding-left: 0.2rem;
        color: @Colors.Hex(Colors.Text);
        line-height: 1rem;
        font-size: 0.8rem;
        user-select: none;
        pointer-events: none;
        overflow: hidden;
    }

    .windowResize {
        position: absolute;
        right: 0;
        bottom: 0;
        width: 0;
        height: 0;
        border-left: 0.5rem solid transparent;
        border-top: 0.5rem solid transparent;
        border-right: 0.5rem solid @Colors.Hex(Colors.CanvasTopbar);
        cursor: se-resize;
    }

    .windowButton {
        position: absolute;
        display: flex;
        right: 0;
        width: 1rem;
        height: 1rem;
        padding: 0;
        color: @Colors.Hex(Colors.ButtonText);
        background-color: @Colors.Hex(Colors.Button);
        border: 1px solid @Colors.Hex(Colors.ButtonBorder);
        outline: none;
    }

        .windowButton:hover {
            background-color: @Colors.Hex(Colors.ButtonHover);
        }

        .windowButton:active {
            box-shadow: inset 0 0 0.5em @Colors.Hex(Colors.Shadow);
        }
</style>

@if (JsViewModel is null)
{
    return;
}

<div id="mainWrapper" @onchange="JsViewModel.ReadEvent">
    <canvas id="mainCanvas" class="mainCanvas"></canvas>
</div>

<Button 
    Icon=@("<i class='material-symbols-sharp'>add</i>")
    OnClick="JsViewModel.AddCanvas" 
/>

<Button 
    Icon=@("<i class='material-symbols-sharp'>deployed_code</i>")
    OnClick="JsViewModel.CmdLoadCube" 
/>

@code {
    private JsViewModel? JsViewModel;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        JsViewModel = new JsViewModel(jsRuntime);
    }

    void IDisposable.Dispose()
    {
        JsViewModel?.Dispose();
    }
}
